/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface L1BrokerContract extends Truffle.Contract<L1BrokerInstance> {
  "new"(
    _messenger: string,
    _l2Checkpoint: string,
    _token: string,
    meta?: Truffle.TransactionDetails
  ): Promise<L1BrokerInstance>;
}

type AllEvents = never;

export interface L1BrokerInstance extends Truffle.ContractInstance {
  l2Checkpoint(txDetails?: Truffle.TransactionDetails): Promise<string>;

  messenger(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mintIOU: {
    (
      recipient: string,
      l1ERC20: string,
      l2ERC20: string,
      l1Bank: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      recipient: string,
      l1ERC20: string,
      l2ERC20: string,
      l1Bank: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      recipient: string,
      l1ERC20: string,
      l2ERC20: string,
      l1Bank: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string,
      l1ERC20: string,
      l2ERC20: string,
      l1Bank: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemIOU: {
    (
      id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    l2Checkpoint(txDetails?: Truffle.TransactionDetails): Promise<string>;

    messenger(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mintIOU: {
      (
        recipient: string,
        l1ERC20: string,
        l2ERC20: string,
        l1Bank: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        recipient: string,
        l1ERC20: string,
        l2ERC20: string,
        l1Bank: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        recipient: string,
        l1ERC20: string,
        l2ERC20: string,
        l1Bank: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        recipient: string,
        l1ERC20: string,
        l2ERC20: string,
        l1Bank: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemIOU: {
      (
        id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    token(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
