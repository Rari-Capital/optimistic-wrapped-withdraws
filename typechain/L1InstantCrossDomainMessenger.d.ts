/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface L1InstantCrossDomainMessengerContract
  extends Truffle.Contract<L1InstantCrossDomainMessengerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<L1InstantCrossDomainMessengerInstance>;
}

export interface RelayedMessage {
  name: "RelayedMessage";
  args: {
    msgHash: string;
    0: string;
  };
}

export interface SentMessage {
  name: "SentMessage";
  args: {
    message: string;
    0: string;
  };
}

type AllEvents = RelayedMessage | SentMessage;

export interface L1InstantCrossDomainMessengerInstance
  extends Truffle.ContractInstance {
  initialize: {
    (
      _libAddressManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _libAddressManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _libAddressManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _libAddressManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  messageNonce(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  relayMessage: {
    (
      _target: string,
      _sender: string,
      _message: string,
      _messageNonce: number | BN | string,
      _proof: {
        stateRoot: string;
        stateRootBatchHeader: {
          batchIndex: number | BN | string;
          batchRoot: string;
          batchSize: number | BN | string;
          prevTotalElements: number | BN | string;
          extraData: string;
        };
        stateRootProof: { index: number | BN | string; siblings: string[] };
        stateTrieWitness: string;
        storageTrieWitness: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _target: string,
      _sender: string,
      _message: string,
      _messageNonce: number | BN | string,
      _proof: {
        stateRoot: string;
        stateRootBatchHeader: {
          batchIndex: number | BN | string;
          batchRoot: string;
          batchSize: number | BN | string;
          prevTotalElements: number | BN | string;
          extraData: string;
        };
        stateRootProof: { index: number | BN | string; siblings: string[] };
        stateTrieWitness: string;
        storageTrieWitness: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _target: string,
      _sender: string,
      _message: string,
      _messageNonce: number | BN | string,
      _proof: {
        stateRoot: string;
        stateRootBatchHeader: {
          batchIndex: number | BN | string;
          batchRoot: string;
          batchSize: number | BN | string;
          prevTotalElements: number | BN | string;
          extraData: string;
        };
        stateRootProof: { index: number | BN | string; siblings: string[] };
        stateTrieWitness: string;
        storageTrieWitness: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _target: string,
      _sender: string,
      _message: string,
      _messageNonce: number | BN | string,
      _proof: {
        stateRoot: string;
        stateRootBatchHeader: {
          batchIndex: number | BN | string;
          batchRoot: string;
          batchSize: number | BN | string;
          prevTotalElements: number | BN | string;
          extraData: string;
        };
        stateRootProof: { index: number | BN | string; siblings: string[] };
        stateTrieWitness: string;
        storageTrieWitness: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  relayedMessages(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  replayMessage: {
    (
      _target: string,
      _sender: string,
      _message: string,
      _messageNonce: number | BN | string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _target: string,
      _sender: string,
      _message: string,
      _messageNonce: number | BN | string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _target: string,
      _sender: string,
      _message: string,
      _messageNonce: number | BN | string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _target: string,
      _sender: string,
      _message: string,
      _messageNonce: number | BN | string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  resolve(
    _name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  sendMessage: {
    (
      _target: string,
      _message: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _target: string,
      _message: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _target: string,
      _message: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _target: string,
      _message: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sentMessages(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  successfulMessages(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  xDomainMessageSender(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    initialize: {
      (
        _libAddressManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _libAddressManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _libAddressManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _libAddressManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    messageNonce(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    relayMessage: {
      (
        _target: string,
        _sender: string,
        _message: string,
        _messageNonce: number | BN | string,
        _proof: {
          stateRoot: string;
          stateRootBatchHeader: {
            batchIndex: number | BN | string;
            batchRoot: string;
            batchSize: number | BN | string;
            prevTotalElements: number | BN | string;
            extraData: string;
          };
          stateRootProof: { index: number | BN | string; siblings: string[] };
          stateTrieWitness: string;
          storageTrieWitness: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _target: string,
        _sender: string,
        _message: string,
        _messageNonce: number | BN | string,
        _proof: {
          stateRoot: string;
          stateRootBatchHeader: {
            batchIndex: number | BN | string;
            batchRoot: string;
            batchSize: number | BN | string;
            prevTotalElements: number | BN | string;
            extraData: string;
          };
          stateRootProof: { index: number | BN | string; siblings: string[] };
          stateTrieWitness: string;
          storageTrieWitness: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _target: string,
        _sender: string,
        _message: string,
        _messageNonce: number | BN | string,
        _proof: {
          stateRoot: string;
          stateRootBatchHeader: {
            batchIndex: number | BN | string;
            batchRoot: string;
            batchSize: number | BN | string;
            prevTotalElements: number | BN | string;
            extraData: string;
          };
          stateRootProof: { index: number | BN | string; siblings: string[] };
          stateTrieWitness: string;
          storageTrieWitness: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _target: string,
        _sender: string,
        _message: string,
        _messageNonce: number | BN | string,
        _proof: {
          stateRoot: string;
          stateRootBatchHeader: {
            batchIndex: number | BN | string;
            batchRoot: string;
            batchSize: number | BN | string;
            prevTotalElements: number | BN | string;
            extraData: string;
          };
          stateRootProof: { index: number | BN | string; siblings: string[] };
          stateTrieWitness: string;
          storageTrieWitness: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    relayedMessages(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    replayMessage: {
      (
        _target: string,
        _sender: string,
        _message: string,
        _messageNonce: number | BN | string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _target: string,
        _sender: string,
        _message: string,
        _messageNonce: number | BN | string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _target: string,
        _sender: string,
        _message: string,
        _messageNonce: number | BN | string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _target: string,
        _sender: string,
        _message: string,
        _messageNonce: number | BN | string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    resolve(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    sendMessage: {
      (
        _target: string,
        _message: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _target: string,
        _message: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _target: string,
        _message: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _target: string,
        _message: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sentMessages(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    successfulMessages(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    xDomainMessageSender(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
