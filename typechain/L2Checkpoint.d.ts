/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface L2CheckpointInterface extends ethers.utils.Interface {
  functions: {
    "_withdrawAndMint(address,uint256,address)": FunctionFragment;
    "l1Broker()": FunctionFragment;
    "minterMessenger()": FunctionFragment;
    "withdrawAndMint(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_withdrawAndMint",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "l1Broker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minterMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndMint",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_withdrawAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l1Broker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minterMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndMint",
    data: BytesLike
  ): Result;

  events: {};
}

export class L2Checkpoint extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: L2CheckpointInterface;

  functions: {
    _withdrawAndMint(
      l2Token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_withdrawAndMint(address,uint256,address)"(
      l2Token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    l1Broker(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "l1Broker()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    minterMessenger(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "minterMessenger()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdrawAndMint(
      l2Token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAndMint(address,uint256)"(
      l2Token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  _withdrawAndMint(
    l2Token: string,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_withdrawAndMint(address,uint256,address)"(
    l2Token: string,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  l1Broker(overrides?: CallOverrides): Promise<string>;

  "l1Broker()"(overrides?: CallOverrides): Promise<string>;

  minterMessenger(overrides?: CallOverrides): Promise<string>;

  "minterMessenger()"(overrides?: CallOverrides): Promise<string>;

  withdrawAndMint(
    l2Token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAndMint(address,uint256)"(
    l2Token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    _withdrawAndMint(
      l2Token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "_withdrawAndMint(address,uint256,address)"(
      l2Token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    l1Broker(overrides?: CallOverrides): Promise<string>;

    "l1Broker()"(overrides?: CallOverrides): Promise<string>;

    minterMessenger(overrides?: CallOverrides): Promise<string>;

    "minterMessenger()"(overrides?: CallOverrides): Promise<string>;

    withdrawAndMint(
      l2Token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAndMint(address,uint256)"(
      l2Token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _withdrawAndMint(
      l2Token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_withdrawAndMint(address,uint256,address)"(
      l2Token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    l1Broker(overrides?: CallOverrides): Promise<BigNumber>;

    "l1Broker()"(overrides?: CallOverrides): Promise<BigNumber>;

    minterMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    "minterMessenger()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAndMint(
      l2Token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawAndMint(address,uint256)"(
      l2Token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _withdrawAndMint(
      l2Token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_withdrawAndMint(address,uint256,address)"(
      l2Token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    l1Broker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "l1Broker()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minterMessenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minterMessenger()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAndMint(
      l2Token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAndMint(address,uint256)"(
      l2Token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
