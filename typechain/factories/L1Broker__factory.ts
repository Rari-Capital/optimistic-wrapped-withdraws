/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { L1Broker } from "../L1Broker";

export class L1Broker__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _messenger: string,
    _l2Checkpoint: string,
    _token: string,
    overrides?: Overrides
  ): Promise<L1Broker> {
    return super.deploy(
      _messenger,
      _l2Checkpoint,
      _token,
      overrides || {}
    ) as Promise<L1Broker>;
  }
  getDeployTransaction(
    _messenger: string,
    _l2Checkpoint: string,
    _token: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _messenger,
      _l2Checkpoint,
      _token,
      overrides || {}
    );
  }
  attach(address: string): L1Broker {
    return super.attach(address) as L1Broker;
  }
  connect(signer: Signer): L1Broker__factory {
    return super.connect(signer) as L1Broker__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L1Broker {
    return new Contract(address, _abi, signerOrProvider) as L1Broker;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract L1InstantCrossDomainMessenger",
        name: "_messenger",
        type: "address",
      },
      {
        internalType: "address",
        name: "_l2Checkpoint",
        type: "address",
      },
      {
        internalType: "contract L1OptimismWithdraw",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "l2Checkpoint",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "messenger",
    outputs: [
      {
        internalType: "contract L1InstantCrossDomainMessenger",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "l1ERC20",
        type: "address",
      },
      {
        internalType: "address",
        name: "l2ERC20",
        type: "address",
      },
      {
        internalType: "address",
        name: "l1Bank",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mintIOU",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "redeemIOU",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract L1OptimismWithdraw",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600060035534801561001557600080fd5b506040516106723803806106728339818101604052606081101561003857600080fd5b5080516020820151604090920151600080546001600160a01b039384166001600160a01b03199182161790915560028054948416948216949094179093556001805492909116919092161790556105de806100946000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063526cf3d711610050578063526cf3d714610102578063f73d912c1461010a578063fc0c546a1461012f57610067565b806323d4d38a1461006c5780633cb747bf146100d1575b600080fd5b6100bf600480360360a081101561008257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604082013581169160608101359091169060800135610137565b60408051918252519081900360200190f35b6100d9610329565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100d9610345565b61012d6004803603604081101561012057600080fd5b5080359060200135610361565b005b6100d9610557565b6000805473ffffffffffffffffffffffffffffffffffffffff1633146101a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806105746035913960400191505060405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e296e456040518163ffffffff1660e01b815260040160206040518083038186803b15801561020e57600080fd5b505afa158015610222573d6000803e3d6000fd5b505050506040513d602081101561023857600080fd5b505160025473ffffffffffffffffffffffffffffffffffffffff90811691161461026157600080fd5b6003805460018082019092559054604080517f7d835c780000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff8a8116602483015289811660448301528881166064830152878116608483015260a4820187905291519190921691637d835c789160c480830192600092919082900301818387803b15801561030657600080fd5b505af115801561031a573d6000803e3d6000fd5b50929998505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b600154604080517ff5298aca0000000000000000000000000000000000000000000000000000000081523360048201526024810184905260448101859052905173ffffffffffffffffffffffffffffffffffffffff9092169163f5298aca9160648082019260009290919082900301818387803b1580156103e157600080fd5b505af11580156103f5573d6000803e3d6000fd5b5050600154604080517fe3684e390000000000000000000000000000000000000000000000000000000081526004810187905290516000945084935073ffffffffffffffffffffffffffffffffffffffff9092169163e3684e3991602480820192606092909190829003018186803b15801561047057600080fd5b505afa158015610484573d6000803e3d6000fd5b505050506040513d606081101561049a57600080fd5b50805160409182015182517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152336024830152604482018890529351929550909350918416916323b872dd9160648083019260209291908290030181600087803b15801561052557600080fd5b505af1158015610539573d6000803e3d6000fd5b505050506040513d602081101561054f57600080fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff168156fe4f6e6c79207468652063726f737320646f6d61696e206d657373656e6765722063616e2063616c6c2074686973206d6574686f642ea2646970667358221220ed3bb4ca2e21e0f916dd97b28b61311c4a9e05f348300ffedfae5c25d8fb633464736f6c63430007060033";
